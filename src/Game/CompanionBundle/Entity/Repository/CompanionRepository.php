<?php

namespace Game\CompanionBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Game\CompanionBundle\Entity\Companion;

/**
 * CompanionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanionRepository extends EntityRepository
{
    /**
     * @param $char
     * @return mixed
     */
    public function getPendingCompanion($char)
    {
        $qb = $this->createQueryBuilder('comp');
        $qb
            ->select('comp')
            ->where('comp.character = :char')
            ->andWhere('comp.status = :status')
            ->setParameters(array(':char'=>$char, 'status'=>Companion::STATUS_PENDING));

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $char
     * @return array
     */
    public function getInPartyCompanions($char)
    {
        $qb = $this->createQueryBuilder('comp');
        $qb
            ->select('comp')
            ->where('comp.character = :char')
            ->andWhere('comp.status = :status')
            ->setParameters(array(':char'=>$char, 'status'=>Companion::STATUS_IN_PARTY));

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param $char
     * @return mixed
     */
    public function getPartySize($char)
    {
        $qb = $this->createQueryBuilder('comp');
        $qb
            ->select('COUNT(comp)')
            ->where('comp.character = :char')
            ->andWhere('comp.status = :status')
            ->setParameters(array(':char'=>$char, 'status'=>Companion::STATUS_IN_PARTY));

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $char
     * @return array
     */
    public function getAvailableCompanionsForQuest($char)
    {
        $qb = $this->createQueryBuilder('comp');
        $qb
            ->select('comp')
            ->leftJoin('comp.questInstances', 'qi')
            ->where('comp.character = :char')
            ->andWhere('comp.status = :status')
            ->andWhere('qi.id IS NULL')
            ->setParameters(array(':char'=>$char, 'status'=>Companion::STATUS_IN_PARTY));

        return $qb->getQuery()->getArrayResult();
    }
}
